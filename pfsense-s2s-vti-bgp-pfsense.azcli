rg=pfsense-s2s-vti-bgp-pfsense
location='centralindia'
vhdUri=https://wadvhds.blob.core.windows.net/vhds/pfsense-1nic.vhd
storageType=Premium_LRS
site1_vnet_name='site1'
site1_vnet_address='10.1.0.0/16'
site1_fw_subnet_name='fw'
site1_fw_subnet_address='10.1.0.0/24'
site1_vm_subnet_name='vm'
site1_vm_subnet_address='10.1.1.0/24'
site1_fw_vti_ip=192.168.1.1
site1_fw_asn=65551

s1spoke_vnet_name=s1spoke
s1spoke_vnet_address=10.11.0.0/16
s1spoke_vm_subnet_name=vm
s1spoke_vm_subnet_address=10.11.1.0/24

site2_vnet_name='site2'
site2_vnet_address='10.2.0.0/16'
site2_fw_subnet_name='fw'
site2_fw_subnet_address='10.2.0.0/24'
site2_vm_subnet_name='vm'
site2_vm_subnet_address='10.2.1.0/24'
site2_fw_vti_ip=192.168.1.2
site2_fw_asn=65552

s2spoke_vnet_name=s2spoke
s2spoke_vnet_address=10.12.0.0/16
s2spoke_vm_subnet_name=vm
s2spoke_vm_subnet_address=10.12.1.0/24

vm_size=Standard_B2ats_v2
admin_username=$(whoami)
admin_password='Test#123#123'
myip=$(curl -s4 https://ifconfig.co/)

# create resource group
echo -e "\e[1;36mCreating $rg resource group...\e[0m"
az group create -l $location -n $rg -o none

# site1 vnet
echo -e "\e[1;36mCreating $site1_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $site1_vnet_name -l $location --address-prefixes $site1_vnet_address --subnet-name $site1_vm_subnet_name --subnet-prefixes $site1_vm_subnet_address -o none
az network vnet subnet create -g $rg -n $site1_fw_subnet_name --address-prefixes $site1_fw_subnet_address --vnet-name $site1_vnet_name -o none

# create a managed disk from a vhd
echo -e "\e[1;36mCreating $site1_vnet_name-fw managed disk from a vhd...\e[0m"
az disk create --resource-group $rg --name $site1_vnet_name-fw --sku $storageType --location $location --size-gb 30 --source $vhdUri --os-type Linux -o none
#Get the resource Id of the managed disk
diskId=$(az disk show --name $site1_vnet_name-fw --resource-group $rg --query [id] -o tsv | tr -d '\r')

# Create pfsense VM by attaching existing managed disks as OS
echo -e "\e[1;36mCreating $site1_vnet_name-fw VM...\e[0m"
az network public-ip create -g $rg -n $site1_vnet_name-fw -l $location --allocation-method Static --sku Basic -o none
az network nic create -g $rg -n $site1_vnet_name-fw-wan --subnet $site1_fw_subnet_name --vnet-name $site1_vnet_name --ip-forwarding true --private-ip-address 10.1.0.250 --public-ip-address $site1_vnet_name-fw -o none
az vm create --name $site1_vnet_name-fw --resource-group $rg --nics $site1_vnet_name-fw-wan --size Standard_B2als_v2 --attach-os-disk $diskId --os-type linux -o none
site1_fw_public_ip=$(az network public-ip show -g $rg -n $site1_vnet_name-fw --query 'ipAddress' -o tsv | tr -d '\r') && echo $site1_vnet_name-fw public ip: $site1_fw_public_ip
site1_fw_wan_private_ip=$(az network nic show -g $rg -n $site1_vnet_name-fw-wan --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo $site1_vnet_name-fw wan private IP: $site1_fw_wan_private_ip

# site2 vnet
echo -e "\e[1;36mCreating $site2_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $site2_vnet_name -l $location --address-prefixes $site2_vnet_address --subnet-name $site2_vm_subnet_name --subnet-prefixes $site2_vm_subnet_address -o none
az network vnet subnet create -g $rg -n $site2_fw_subnet_name --address-prefixes $site2_fw_subnet_address --vnet-name $site2_vnet_name -o none

# create a managed disk from a vhd
echo -e "\e[1;36mCreating $site2_vnet_name-fw managed disk from a vhd...\e[0m"
az disk create --resource-group $rg --name $site2_vnet_name-fw --sku $storageType --location $location --size-gb 30 --source $vhdUri --os-type Linux -o none
#Get the resource Id of the managed disk
diskId=$(az disk show --name $site2_vnet_name-fw --resource-group $rg --query [id] -o tsv | tr -d '\r')

# Create pfsense VM by attaching existing managed disks as OS
echo -e "\e[1;36mCreating $site2_vnet_name-fw VM...\e[0m"
az network public-ip create -g $rg -n $site2_vnet_name-fw -l $location --allocation-method Static --sku Basic -o none
az network nic create -g $rg -n $site2_vnet_name-fw-wan --subnet $site2_fw_subnet_name --vnet-name $site2_vnet_name --ip-forwarding true --private-ip-address 10.2.0.250 --public-ip-address $site2_vnet_name-fw -o none
az vm create --name $site2_vnet_name-fw --resource-group $rg --nics $site2_vnet_name-fw-wan --size Standard_B2als_v2 --attach-os-disk $diskId --os-type linux -o none
site2_fw_public_ip=$(az network public-ip show -g $rg -n $site2_vnet_name-fw --query 'ipAddress' -o tsv | tr -d '\r') && echo $site2_vnet_name-fw public ip: $site2_fw_public_ip
site2_fw_wan_private_ip=$(az network nic show -g $rg -n $site2_vnet_name-fw-wan --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo $site2_vnet_name-fw wan private IP: $site2_fw_wan_private_ip

# Download config files
site1_config=~/site1_vti_bgp_config.xml
curl -o $site1_config https://raw.githubusercontent.com/wshamroukh/s2s-pfsense/refs/heads/main/site1_vti_bgp_config.xml
sed -i -e "s/98\.70\.101\.171/${site1_fw_public_ip}/g" -e "s/98\.70\.103\.212/${site2_fw_public_ip}/g" $site1_config

site2_config=~/site2_vti_bgp_config.xml
curl -o $site2_config https://raw.githubusercontent.com/wshamroukh/s2s-pfsense/refs/heads/main/site2_vti_bgp_config.xml
sed -i -e "s/98\.70\.101\.171/${site1_fw_public_ip}/g" -e "s/98\.70\.103\.212/${site2_fw_public_ip}/g" $site2_config

# Copying config files to site1 pfsense
echo -e "\e[1;36mCopying configuration files to $site1_vnet_name-fw and installing opnsense firewall...\e[0m"
scp -o StrictHostKeyChecking=no $site1_config admin@$site1_fw_public_ip:/cf/conf/config.xml
echo -e "\e[1;36mRebooting $site1_vnet_name-fw after importing the config file...\e[0m"
ssh -o StrictHostKeyChecking=no admin@$site1_fw_public_ip "reboot"

# Copying config files to site2 pfsense
echo -e "\e[1;36mCopying configuration files to $site2_vnet_name-fw and installing opnsense firewall...\e[0m"
scp -o StrictHostKeyChecking=no $site2_config admin@$site2_fw_public_ip:/cf/conf/config.xml
echo -e "\e[1;36mRebooting $site2_vnet_name-fw after importing the config file...\e[0m"
ssh -o StrictHostKeyChecking=no admin@$site2_fw_public_ip "reboot"

# clean up config files
rm $site1_config $site2_config

# create s1spoke vnet
echo -e "\e[1;36mCreating $s1spoke_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $s1spoke_vnet_name -l $location --address-prefixes $s1spoke_vnet_address --subnet-name $s1spoke_vm_subnet_name --subnet-prefixes $s1spoke_vm_subnet_address -o none

# create s2spoke vnet
echo -e "\e[1;36mCreating $s2spoke_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $s2spoke_vnet_name -l $location --address-prefixes $s2spoke_vnet_address --subnet-name $s2spoke_vm_subnet_name --subnet-prefixes $s2spoke_vm_subnet_address -o none

# site1 vm
echo -e "\e[1;36mCreating $site1_vnet_name VM...\e[0m"
az network nic create -g $rg -n "$site1_vnet_name" -l $location --vnet-name $site1_vnet_name --subnet $site1_vm_subnet_name -o none
az vm create -g $rg -n $site1_vnet_name -l $location --image Ubuntu2404 --nics "$site1_vnet_name" --os-disk-name "$site1_vnet_name" --size $vm_size --admin-username $admin_username --admin-password $admin_password --no-wait -o none
site1_vm_ip=$(az network nic show -g $rg -n $site1_vnet_name --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo $site1_vnet_name vm private ip: $site1_vm_ip

# site2 vm
echo -e "\e[1;36mCreating $site2_vnet_name VM...\e[0m"
az network nic create -g $rg -n "$site2_vnet_name" -l $location --vnet-name $site2_vnet_name --subnet $site2_vm_subnet_name -o none
az vm create -g $rg -n $site2_vnet_name -l $location --image Ubuntu2404 --nics "$site2_vnet_name" --os-disk-name "$site2_vnet_name" --size $vm_size --admin-username $admin_username --admin-password $admin_password --no-wait -o none
site2_vm_ip=$(az network nic show -g $rg -n $site2_vnet_name --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo $site2_vnet_name vm private ip: $site2_vm_ip

# s1spoke vm
echo -e "\e[1;36mCreating $s1spoke_vnet_name VM...\e[0m"
az network nic create -g $rg -n "$s1spoke_vnet_name" -l $location --vnet-name $s1spoke_vnet_name --subnet $s1spoke_vm_subnet_name -o none
az vm create -g $rg -n $s1spoke_vnet_name -l $location --image Ubuntu2404 --nics "$s1spoke_vnet_name" --os-disk-name "$s1spoke_vnet_name" --size $vm_size --admin-username $admin_username --admin-password $admin_password --no-wait -o none
s1spoke_vm_ip=$(az network nic show -g $rg -n $s1spoke_vnet_name --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo $s1spoke_vnet_name vm private ip: $s1spoke_vm_ip

# s2spoke vm
echo -e "\e[1;36mCreating $s2spoke_vnet_name VM...\e[0m"
az network nic create -g $rg -n "$s2spoke_vnet_name" -l $location --vnet-name $s2spoke_vnet_name --subnet $s2spoke_vm_subnet_name -o none
az vm create -g $rg -n $s2spoke_vnet_name -l $location --image Ubuntu2404 --nics "$s2spoke_vnet_name" --os-disk-name "$s2spoke_vnet_name" --size $vm_size --admin-username $admin_username --admin-password $admin_password --no-wait -o none
s2spoke_vm_ip=$(az network nic show -g $rg -n $s2spoke_vnet_name --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo $s2spoke_vnet_name vm private ip: $s2spoke_vm_ip

# Create VNet peering between site1 and s1spoke
echo -e "\e[1;36mCreating VNet peering between $site1_vnet_name and $s1spoke_vnet_name...\e[0m"
az network vnet peering create -g $rg -n $site1_vnet_name-peering --remote-vnet $site1_vnet_name --vnet-name $s1spoke_vnet_name --allow-vnet-access --allow-forwarded-traffic -o none
az network vnet peering create -g $rg -n $s1spoke_vnet_name-peering --remote-vnet $s1spoke_vnet_name --vnet-name $site1_vnet_name --allow-vnet-access --allow-forwarded-traffic -o none

# Create VNet peering between site2 and s2spoke
echo -e "\e[1;36mCreating VNet peering between $site2_vnet_name and $s2spoke_vnet_name...\e[0m"
az network vnet peering create -g $rg -n $site2_vnet_name-peering --remote-vnet $site2_vnet_name --vnet-name $s2spoke_vnet_name --allow-vnet-access --allow-forwarded-traffic -o none
az network vnet peering create -g $rg -n $s2spoke_vnet_name-peering --remote-vnet $s2spoke_vnet_name --vnet-name $site2_vnet_name --allow-vnet-access --allow-forwarded-traffic -o none

# site1 route table
echo -e "\e[1;36mCreating $site1_vnet_name route table....\e[0m"
az network route-table create -g $rg -n $site1_vnet_name -l $location --disable-bgp-route-propagation true -o none
az network route-table route create -g $rg -n to-s1spoke --address-prefix $s1spoke_vnet_address --next-hop-type virtualappliance --route-table-name $site1_vnet_name --next-hop-ip-address $site1_fw_wan_private_ip -o none
az network route-table route create -g $rg -n to-site2 --address-prefix $site2_vnet_address --next-hop-type virtualappliance --route-table-name $site1_vnet_name --next-hop-ip-address $site1_fw_wan_private_ip -o none
az network route-table route create -g $rg -n to-s2spoke --address-prefix $s2spoke_vnet_address --next-hop-type virtualappliance --route-table-name $site1_vnet_name --next-hop-ip-address $site1_fw_wan_private_ip -o none
az network route-table route create -g $rg -n to-site1-vti --address-prefix ${site1_fw_vti_ip}/32 --next-hop-type virtualappliance --route-table-name $site1_vnet_name --next-hop-ip-address $site1_fw_wan_private_ip -o none
az network route-table route create -g $rg -n to-site2-vti --address-prefix ${site2_fw_vti_ip}/32 --next-hop-type virtualappliance --route-table-name $site1_vnet_name --next-hop-ip-address $site1_fw_wan_private_ip -o none
az network vnet subnet update -g $rg -n $site1_vm_subnet_name --vnet-name $site1_vnet_name --route-table $site1_vnet_name -o none

# s1spoke route table
echo -e "\e[1;36mCreating $s1spoke_vnet_name route table....\e[0m"
az network route-table create -g $rg -n $s1spoke_vnet_name -l $location --disable-bgp-route-propagation true -o none
az network route-table route create -g $rg -n to-site1 --address-prefix $site1_vnet_address --next-hop-type virtualappliance --route-table-name $s1spoke_vnet_name --next-hop-ip-address $site1_fw_wan_private_ip -o none
az network route-table route create -g $rg -n to-site2 --address-prefix $site2_vnet_address --next-hop-type virtualappliance --route-table-name $s1spoke_vnet_name --next-hop-ip-address $site1_fw_wan_private_ip -o none
az network route-table route create -g $rg -n to-s2spoke --address-prefix $s2spoke_vnet_address --next-hop-type virtualappliance --route-table-name $s1spoke_vnet_name --next-hop-ip-address $site1_fw_wan_private_ip -o none
az network route-table route create -g $rg -n to-site1-vti --address-prefix ${site1_fw_vti_ip}/32 --next-hop-type virtualappliance --route-table-name $s1spoke_vnet_name --next-hop-ip-address $site1_fw_wan_private_ip -o none
az network route-table route create -g $rg -n to-site2-vti --address-prefix ${site2_fw_vti_ip}/32 --next-hop-type virtualappliance --route-table-name $s1spoke_vnet_name --next-hop-ip-address $site1_fw_wan_private_ip -o none
az network vnet subnet update -g $rg -n $s1spoke_vm_subnet_name --vnet-name $s1spoke_vnet_name --route-table $s1spoke_vnet_name -o none

# site2 route table
echo -e "\e[1;36mCreating $site2_vnet_name route table....\e[0m"
az network route-table create -g $rg -n $site2_vnet_name -l $location --disable-bgp-route-propagation true -o none
az network route-table route create -g $rg -n to-s2spoke --address-prefix $s2spoke_vnet_address --next-hop-type virtualappliance --route-table-name $site2_vnet_name --next-hop-ip-address $site2_fw_wan_private_ip -o none
az network route-table route create -g $rg -n to-site1 --address-prefix $site1_vnet_address --next-hop-type virtualappliance --route-table-name $site2_vnet_name --next-hop-ip-address $site2_fw_wan_private_ip -o none
az network route-table route create -g $rg -n to-s1spoke --address-prefix $s1spoke_vnet_address --next-hop-type virtualappliance --route-table-name $site2_vnet_name --next-hop-ip-address $site2_fw_wan_private_ip -o none
az network route-table route create -g $rg -n to-site1-vti --address-prefix ${site1_fw_vti_ip}/32 --next-hop-type virtualappliance --route-table-name $site2_vnet_name --next-hop-ip-address $site2_fw_wan_private_ip -o none
az network route-table route create -g $rg -n to-site2-vti --address-prefix ${site2_fw_vti_ip}/32 --next-hop-type virtualappliance --route-table-name $site2_vnet_name --next-hop-ip-address $site2_fw_wan_private_ip -o none
az network vnet subnet update -g $rg -n $site2_vm_subnet_name --vnet-name $site2_vnet_name --route-table $site2_vnet_name -o none

# s2spoke route table
echo -e "\e[1;36mCreating $s2spoke_vnet_name route table....\e[0m"
az network route-table create -g $rg -n $s2spoke_vnet_name -l $location --disable-bgp-route-propagation true -o none
az network route-table route create -g $rg -n to-site1 --address-prefix $site1_vnet_address --next-hop-type virtualappliance --route-table-name $s2spoke_vnet_name --next-hop-ip-address $site2_fw_wan_private_ip -o none
az network route-table route create -g $rg -n to-site2 --address-prefix $site2_vnet_address --next-hop-type virtualappliance --route-table-name $s2spoke_vnet_name --next-hop-ip-address $site2_fw_wan_private_ip -o none
az network route-table route create -g $rg -n to-s1spoke --address-prefix $s1spoke_vnet_address --next-hop-type virtualappliance --route-table-name $s2spoke_vnet_name --next-hop-ip-address $site2_fw_wan_private_ip -o none
az network route-table route create -g $rg -n to-site1-vti --address-prefix ${site1_fw_vti_ip}/32 --next-hop-type virtualappliance --route-table-name $s2spoke_vnet_name --next-hop-ip-address $site2_fw_wan_private_ip -o none
az network route-table route create -g $rg -n to-site2-vti --address-prefix ${site2_fw_vti_ip}/32 --next-hop-type virtualappliance --route-table-name $s2spoke_vnet_name --next-hop-ip-address $site2_fw_wan_private_ip -o none
az network vnet subnet update -g $rg -n $s2spoke_vm_subnet_name --vnet-name $s2spoke_vnet_name --route-table $s2spoke_vnet_name -o none

# # wait for pfsense to boot up
# echo -e "\e[1;36mWaiting for pfsense to boot up...\e[0m"
# sleep 120

echo -e "\e[1;36mChecking connectivity from $site1_vnet_name-fw to $site2_vnet_name network...\e[0m"
ssh -o StrictHostKeyChecking=no admin@$site1_fw_public_ip "ping -c 3 $site2_fw_vti_ip && ping -c 3 $site2_fw_wan_private_ip && ping -c 3 $site2_fw_wan_private_ip && ping -c 3 $site2_vm_ip"
ssh -o StrictHostKeyChecking=no admin@$site1_fw_public_ip "vtysh -c 'show bgp summary' && vtysh -c 'show ip route' && vtysh -c 'show ip bgp'"

echo -e "\e[1;36mChecking connectivity from $site2_vnet_name-fw to $site1_vnet_name network...\e[0m"
ssh -o StrictHostKeyChecking=no admin@$site2_fw_public_ip "ping -c 3 $site1_fw_vti_ip && ping -c 3 $site1_fw_wan_private_ip && ping -c 3 $site1_fw_wan_private_ip && ping -c 3 $site1_vm_ip"
ssh -o StrictHostKeyChecking=no admin@$site2_fw_public_ip "vtysh -c 'show bgp summary' && vtysh -c 'show ip route' && vtysh -c 'show ip bgp'"
# check this for routing https://docs.netgate.com/pfsense/en/latest/troubleshooting/asymmetric-routing.html

# Follow this documentation to configure pfsense ipsec s2s vpn between the two sites: https://docs.netgate.com/pfsense/en/latest/vpn/ipsec/routed-vti.html but take the following into account:
# 1. In phase 1, set 'My identifier'/'Peer identifier' to IP address and put the public ip address of each pfsense firewall
# 2. in phase 2, set the 'local network'/'remote network' to network and put the $site1_vnet_address and $site2_vnet_address
# 3. In the IPSec firewall rule, set the 'destination' to 'network' and out source as other pfsense vnet address space, while destination as the current pfsense vnet address space
# credentials for pfsense web interface:
# username: admin
# password: pfsense

# az group delete -n $rg -y --no-wait